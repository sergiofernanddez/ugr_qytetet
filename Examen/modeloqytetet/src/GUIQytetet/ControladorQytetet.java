/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIQytetet;
import ModeloQytetet.*;
import InterfazTextualQytetet.VistaTextualQytetet;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author pakejo
 */
public class ControladorQytetet extends javax.swing.JFrame {
    static Qytetet juego = new Qytetet();
    Casilla casilla;
    Jugador jugador;
    VistaTextualQytetet vista;
    /**
     * Creates new form ControladorQytetet
     */
    public ControladorQytetet() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vistaQytetet1 = new GUIQytetet.VistaQytetet();
        jbSalirCarcelDado = new java.awt.Button();
        jbSalirCarcelPagando = new java.awt.Button();
        jbJugar = new java.awt.Button();
        jbComprarPropiedad = new java.awt.Button();
        jbAplicarSorpresa = new java.awt.Button();
        jbSiguienteJugador = new java.awt.Button();
        jbEdificarCasaAqui = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbSalirCarcelDado.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jbSalirCarcelDado.setLabel("Salir Cárcel Dado");
        jbSalirCarcelDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirCarcelDadoActionPerformed(evt);
            }
        });

        jbSalirCarcelPagando.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jbSalirCarcelPagando.setLabel("Salir Cárcel Pagando");
        jbSalirCarcelPagando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirCarcelPagandoActionPerformed(evt);
            }
        });

        jbJugar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbJugar.setLabel("Jugar");
        jbJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbJugarActionPerformed(evt);
            }
        });

        jbComprarPropiedad.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jbComprarPropiedad.setLabel("Comprar Propiedad");
        jbComprarPropiedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbComprarPropiedadActionPerformed(evt);
            }
        });

        jbAplicarSorpresa.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jbAplicarSorpresa.setLabel("Aplicar Sorpresa");
        jbAplicarSorpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAplicarSorpresaActionPerformed(evt);
            }
        });

        jbSiguienteJugador.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jbSiguienteJugador.setLabel("Siguiente Jugador ");
        jbSiguienteJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSiguienteJugadorActionPerformed(evt);
            }
        });

        jbEdificarCasaAqui.setText("Edificar Casa Aqui");
        jbEdificarCasaAqui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEdificarCasaAquiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vistaQytetet1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbSalirCarcelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbSalirCarcelPagando, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbJugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbComprarPropiedad, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbAplicarSorpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jbEdificarCasaAqui)
                                .addGap(96, 96, 96)))
                        .addComponent(jbSiguienteJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vistaQytetet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbSalirCarcelDado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSalirCarcelPagando, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jbJugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jbEdificarCasaAqui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbAplicarSorpresa, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jbComprarPropiedad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addComponent(jbSiguienteJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirCarcelPagandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirCarcelPagandoActionPerformed

        boolean resultado = juego.intentarSalirCarcel(MetodoSalirCarcel.PAGANDOLIBERTAD);
        
        this.jbSalirCarcelPagando.setEnabled(false);
        this.jbSalirCarcelDado.setEnabled(false);
        this.jbJugar.setEnabled(false);
        
        if(resultado){
            JOptionPane.showMessageDialog(this, "Sales de la cárcel");
            this.jbJugar.setEnabled(true);
        }else {
            JOptionPane.showMessageDialog(this, "NO sales de la carcel. \nPasa turno");
            juego.siguienteJugador();
            this.actualizar(juego);
        }
        
        this.actualizar(juego);
    }//GEN-LAST:event_jbSalirCarcelPagandoActionPerformed

    private void jbJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbJugarActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Tira el dado");
       int num_dado = Dado.getInstance().nextNumber();

        casilla = juego.getJugadorActual().getCasillaActual();
        jugador = juego.getJugadorActual();            
        jugador.setCasillaActual(juego.getTablero().obtenerNuevaCasilla(casilla, num_dado));            
        casilla = jugador.getCasillaActual();
        this.actualizar(juego);
        
        if(jugador.getEncarcelado()){
            this.jbJugar.setEnabled(false);
            this.jbSalirCarcelDado.setEnabled(true);
            this.jbSalirCarcelPagando.setEnabled(true);
        }      
        else if (jugador.getSaldo() > 0) {
            this.jugar();
        }
        else{
           JOptionPane.showMessageDialog(this,"Se acabó el juego. "+jugador.getNombre()+" esta en bancarrota");
           this.finJuego();
         }

             
    }//GEN-LAST:event_jbJugarActionPerformed

    private void jbSiguienteJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSiguienteJugadorActionPerformed
        
        if(!jugador.getEncarcelado() && jugador.tengoPropiedades()){
                this.gestionInmobiliaria();
            }
        
        if(jugador.getEncarcelado())
            this.jbJugar.setEnabled(false);
        
        juego.siguienteJugador();
        this.actualizar(juego);
        this.jbJugar.setEnabled(true);
        this.jbSiguienteJugador.setEnabled(false);
    }//GEN-LAST:event_jbSiguienteJugadorActionPerformed

    private void jbSalirCarcelDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirCarcelDadoActionPerformed

        boolean resultado = juego.intentarSalirCarcel(MetodoSalirCarcel.TIRANDODADO);
        
        this.jbSalirCarcelDado.setEnabled(false);
        this.jbSalirCarcelPagando.setEnabled(false);
        
        if(resultado){
            JOptionPane.showMessageDialog(this, "Sales de la cárcel");
            this.jbJugar.setEnabled(true);
        }else {
            JOptionPane.showMessageDialog(this, "NO sales de la carcel. \nPasa Turno");
            juego.siguienteJugador();
            this.actualizar(juego);
        }
        
        this.actualizar(juego);
    }//GEN-LAST:event_jbSalirCarcelDadoActionPerformed

    private void jbAplicarSorpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAplicarSorpresaActionPerformed
        // TODO add your handling code here:
        this.jbAplicarSorpresa.setEnabled(false);
        
        juego.setCartaActual(juego.getCartaMazo(0));
        juego.aplicarSorpresa();
        
        this.actualizar(juego);
        
        if(juego.getCartaActual().getTipo() == TipoSorpresa.IRACASILLA && juego.getCartaActual().getValor() != 5){
            if(  ((Calle)jugador.getCasillaActual()).tengoPropietario() ){
                JOptionPane.showMessageDialog(this,"Esta casilla ya esta comprada");
                int coste = ((Calle)casilla).cobrarAlquiler();
                JOptionPane.showMessageDialog(this, "Le pagas "+coste+" a "+((Calle)casilla).getTitulo().getPropietario().getNombre());  
            }
            else{
                casilla = jugador.getCasillaActual();
                this.jbComprarPropiedad.setEnabled(true);
            }
        }
        this.jbSiguienteJugador.setEnabled(true);
        this.jbJugar.setEnabled(false);
    }//GEN-LAST:event_jbAplicarSorpresaActionPerformed

    private void jbComprarPropiedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbComprarPropiedadActionPerformed

        if(juego.getJugadorActual().tengoSaldo(((Calle)casilla).getCoste())){
            boolean puedeComprar = juego.getJugadorActual().comprarTituloPropiedad();
            if(puedeComprar){
                ((Calle)casilla).asignarPropietario(juego.getJugadorActual());
                JOptionPane.showMessageDialog(this,"Compra realizada");
                JOptionPane.showMessageDialog(this,"Coste: "+((Calle)casilla).getCoste()+
                        "\nSaldo final: "+juego.getJugadorActual().getSaldo());
            }
        }else{
            JOptionPane.showMessageDialog(this,"¿De verdad pensaste que podías comprar estando a dos velas?");
            }
        this.actualizar(juego);
        this.jbComprarPropiedad.setEnabled(false);
        this.jbJugar.setEnabled(false);
        this.jbSiguienteJugador.setEnabled(true);
    }//GEN-LAST:event_jbComprarPropiedadActionPerformed

    private void jbEdificarCasaAquiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEdificarCasaAquiActionPerformed
        boolean puedo_edificar = juego.getJugadorActual().puedoEdificarCasa(casilla);
        
        if(puedo_edificar){
            ((Calle) casilla).edificarCasa();
            this.jbEdificarCasaAqui.setEnabled(true);
        }
        
        this.actualizar(juego);
        this.jbSiguienteJugador.setEnabled(true);
        this.jbComprarPropiedad.setEnabled(false);
        this.jbJugar.setEnabled(false);
        
    }//GEN-LAST:event_jbEdificarCasaAquiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       ControladorQytetet controladorQytetet= new ControladorQytetet(); 

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ControladorQytetet().setVisible(true);
       });
        
        CapturaNombreJugadores capturaNombres
               = new CapturaNombreJugadores(controladorQytetet, true);
        ArrayList<String> nombres= capturaNombres.obtenerNombres();
        
        juego.inicializarJuego(nombres);
        Dado.createInstance(controladorQytetet);
        
        controladorQytetet.actualizar(juego);   
        
        controladorQytetet.setVisible(true);
    }
    
    
    public void habilitarComenzarTurno(){
        this.jbComprarPropiedad.setEnabled(false);
        this.jbSiguienteJugador.setEnabled(false);
        this.jbAplicarSorpresa.setEnabled(false);
        this.jbEdificarCasaAqui.setEnabled(false);

        if(juego.getJugadorActual().getEncarcelado()){
            this.jbSalirCarcelPagando.setEnabled(true);
            this.jbSalirCarcelDado.setEnabled(true);
        }
        else{
           this.jbJugar.setEnabled(true);
           this.jbSalirCarcelPagando.setEnabled(false);
           this.jbSalirCarcelDado.setEnabled(false);
        }
    }
    
    public void actualizar(Qytetet juego) {
        this.habilitarComenzarTurno();
        vistaQytetet1.actualizar(juego);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button jbAplicarSorpresa;
    private java.awt.Button jbComprarPropiedad;
    private javax.swing.JButton jbEdificarCasaAqui;
    private java.awt.Button jbJugar;
    private java.awt.Button jbSalirCarcelDado;
    private java.awt.Button jbSalirCarcelPagando;
    private java.awt.Button jbSiguienteJugador;
    private GUIQytetet.VistaQytetet vistaQytetet1;
    // End of variables declaration//GEN-END:variables

    private void gestionInmobiliaria() {
      
        int eleccion;
        
        do{
            Casilla calle = this.elegirPropiedad(juego.getJugadorActual().getPropiedades());

            eleccion = Integer.parseInt(JOptionPane.showInputDialog("Gestion Inmobiliaria.\n0 : Pasar  turno"
                    + "\n1 : Construir Casa"+ "\n2 : Construir Hotel"+ "\n3 : Vender Propiedad" + "\n4 : Hipotecar"+
                    "\n5 : Cancelar Hipoteca"));

            this.accionGestion(calle,eleccion);
            
        }while(eleccion != 0);
    }

    private Casilla elegirPropiedad(ArrayList<Casilla> propiedades) {
        
        HashMap<Integer, String> calles = new HashMap<>();
        
        ArrayList<Casilla> temp = juego.getJugadorActual().getPropiedades();
        
        for(Integer i=0; i<temp.size(); i++){
            calles.put(i, ((Calle)temp.get(i)).getTitulo().getNombre());
        }
        
        int calle = Integer.parseInt(JOptionPane.showInputDialog(calles));
        
        return temp.get(calle);
    }

    private void accionGestion(Casilla calle, int eleccion) {

        if(eleccion == 1){
            int coste = ((Calle)calle).edificarCasa();
            juego.getJugadorActual().modificarSaldo(-coste);
        }
            
        if(eleccion == 2){
            if(((Calle)calle).getNumCasas()<4)
                JOptionPane.showMessageDialog(this,"Se necesitan al menos 4 casas para construir un hotel");
            else{
                int coste = ((Calle)calle).edificarHotel();
                juego.getJugadorActual().modificarSaldo(-coste);
            }
        }
            
        if(eleccion == 3){
            juego.getJugadorActual().venderPropiedad(calle);
        }
            
        if(eleccion == 4){
            int hipoteca = ((Calle)calle).hipotecar();
            juego.getJugadorActual().modificarSaldo(hipoteca);
        }
            
        if(eleccion == 5){
            int cancelar = ((Calle)calle).cancelarHipoteca();
            juego.getJugadorActual().modificarSaldo(-cancelar);
        }
    }
    
    private void jugar(){
        
    if(casilla.getTipo() == TipoCasilla.SORPRESA){
        JOptionPane.showMessageDialog(this,"Has caido en una casilla sorpresa!!!!");
        juego.setCartaActual(juego.getCartaMazo(0));
        this.actualizar(juego);
        this.jbJugar.setEnabled(false);
        this.jbAplicarSorpresa.setEnabled(true);
     }
     if(casilla.getTipo() == TipoCasilla.PARKING){
         JOptionPane.showMessageDialog(this, "Has entrado en el parking");
         this.jbJugar.setEnabled(false);
         this.jbSiguienteJugador.setEnabled(true);
     }
     if(casilla.getTipo() == TipoCasilla.CARCEL){
          JOptionPane.showMessageDialog(this, "Haces una visita a la cárcel");
          this.jbJugar.setEnabled(false);
          this.jbSiguienteJugador.setEnabled(true);
     }
     if(casilla.getTipo() == TipoCasilla.IMPUESTO){
         jugador.pagarImpuestos(2000);
         this.jbJugar.setEnabled(false);
         this.jbSiguienteJugador.setEnabled(true);
     }
     if(casilla.getTipo() == TipoCasilla.JUEZ){
          JOptionPane.showMessageDialog(this, "Ahora si que vas a la cárcel de cabeza");
          juego.encarcelarJugador();
          this.jbJugar.setEnabled(false);
          juego.siguienteJugador();
          this.actualizar(juego);
     }         
     if(casilla.getTipo() == TipoCasilla.CALLE){

         if( ((Calle)casilla).getTitulo().getPropietario() == null  ){
             JOptionPane.showMessageDialog(this,"Esta casilla no tiene propietario.");
             this.jbComprarPropiedad.setEnabled(true);
             
             this.jbSiguienteJugador.setEnabled(true);
             this.jbJugar.setEnabled(false);
         }
         else if(((Calle)casilla).getTitulo().getPropietario() != juego.getJugadorActual() ){
             JOptionPane.showMessageDialog(this,"Esta casilla ya esta comprada");
             int coste = ((Calle)casilla).cobrarAlquiler();
             JOptionPane.showMessageDialog(this, "Le pagas "+coste+" a "+((Calle)casilla).getTitulo().getPropietario().getNombre());
             juego.getJugadorActual().modificarSaldo(-coste);
             this.jbJugar.setEnabled(false);
             this.jbSiguienteJugador.setEnabled(true);
         }
      }
    }

    private void finJuego() {
        this.jbAplicarSorpresa.setEnabled(false);
        this.jbComprarPropiedad.setEnabled(false);
        this.jbJugar.setEnabled(false);
        this.jbSalirCarcelDado.setEnabled(false);
        this.jbSalirCarcelPagando.setEnabled(false);
        this.jbSiguienteJugador.setEnabled(false);
        this.jbEdificarCasaAqui.setEnabled(false);
        
         JOptionPane.showMessageDialog(this, juego.obtenerRanking());
    }
    
}